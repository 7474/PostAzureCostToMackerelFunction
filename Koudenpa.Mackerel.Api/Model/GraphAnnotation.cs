/* 
 * Makerel API
 *
 * This is part of Makerel API.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Koudenpa.Mackerel.Api.Client.OpenAPIDateConverter;

namespace Koudenpa.Mackerel.Api.Model
{
    /// <summary>
    /// GraphAnnotation
    /// </summary>
    [DataContract]
    public partial class GraphAnnotation :  IEquatable<GraphAnnotation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphAnnotation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GraphAnnotation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphAnnotation" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="title">アノテーションのタイトル (required).</param>
        /// <param name="description">アノテーションの詳細.</param>
        /// <param name="from">開始時刻 (epoch秒) (required).</param>
        /// <param name="to">終了時刻 (epoch秒) (required).</param>
        /// <param name="service">サービス名 (required).</param>
        /// <param name="roles">ロール名の配列。このフィールドを指定しない場合は、サービスに紐づくアノテーションとなる.</param>
        public GraphAnnotation(string id = default(string), string title = default(string), string description = default(string), decimal from = default(decimal), decimal to = default(decimal), string service = default(string), List<string> roles = default(List<string>))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for GraphAnnotation and cannot be null");;
            // to ensure "title" is required (not null)
            this.Title = title ?? throw new ArgumentNullException("title is a required property for GraphAnnotation and cannot be null");;
            this.From = from;
            this.To = to;
            // to ensure "service" is required (not null)
            this.Service = service ?? throw new ArgumentNullException("service is a required property for GraphAnnotation and cannot be null");;
            this.Description = description;
            this.Roles = roles;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// アノテーションのタイトル
        /// </summary>
        /// <value>アノテーションのタイトル</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// アノテーションの詳細
        /// </summary>
        /// <value>アノテーションの詳細</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// 開始時刻 (epoch秒)
        /// </summary>
        /// <value>開始時刻 (epoch秒)</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public decimal From { get; set; }

        /// <summary>
        /// 終了時刻 (epoch秒)
        /// </summary>
        /// <value>終了時刻 (epoch秒)</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public decimal To { get; set; }

        /// <summary>
        /// サービス名
        /// </summary>
        /// <value>サービス名</value>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public string Service { get; set; }

        /// <summary>
        /// ロール名の配列。このフィールドを指定しない場合は、サービスに紐づくアノテーションとなる
        /// </summary>
        /// <value>ロール名の配列。このフィールドを指定しない場合は、サービスに紐づくアノテーションとなる</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<string> Roles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GraphAnnotation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GraphAnnotation);
        }

        /// <summary>
        /// Returns true if GraphAnnotation instances are equal
        /// </summary>
        /// <param name="input">Instance of GraphAnnotation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GraphAnnotation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.From == input.From ||
                    this.From.Equals(input.From)
                ) && 
                (
                    this.To == input.To ||
                    this.To.Equals(input.To)
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    input.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.From.GetHashCode();
                hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Service != null)
                    hashCode = hashCode * 59 + this.Service.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
